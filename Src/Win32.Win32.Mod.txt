(* OBERON System 3, Release 2.3.

Copyright 1999 ETH Zürich Institute for Computer Systems, 
ETH Center, CH-8092 Zürich.  e-mail: oberon@inf.ethz.ch.

This module may be used under the conditions of the general Oberon 
System 3 license contract.  The full text can be downloaded from

	"ftp://ftp.inf.ethz.ch/pub/software/Oberon/System3/license.txt;A"

Under the license terms stated it is in particular (a) prohibited to modify
the interface of this module in any way that disagrees with the style
or content of the system and (b) requested to provide all conversions
of the source code to another platform with the name OBERON. *)

MODULE Win32; (** non-portable / source: Win32.Win32.Mod *)	(* 2.5.94 jm bootstrap trap code + color handling *)

(**
Module Win32 provides the low-level interface to the Windows operating system. Some of its duties include
window, font and color management. 
*)
(*
	jm 12.9.95 - Added WndProc Upcall
	ejz 6.10.95 - Improved InitInstance
	31.1.96 - adapted for Windows 95/NT Threads (ejz)
*)

IMPORT Kernel, Kernel32, User32, GDI32, Threads, Strings, S := SYSTEM, C := Console, Modules, Registry;

CONST
	ML = 2; MM = 1; MR = 0;
	kbBufSize = 32; msBufSize = 128;
	SHIFT* = 0; CTRL* =  1; ALT* = 2;
	PageUp* = 0A2X; PageDown* = 0A3X; End* = 0A9X; Home* = 0A8X;
	Left* = 0C4X; Up* = 0C1X; Right* = 0C3X; Down* = 0C2X;
	Insert* = 0A0X; Delete* = 0A1X; F1* = 0A4X;

TYPE
	Pattern = LONGINT (* = PatternPtr *);
	PatternPtr* = POINTER TO PatternDesc;
	PatternDesc* = RECORD
		x*, y*: LONGINT;	(* offset in bitmap *)
		w*, h*: INTEGER;
		bitmap*: LONGINT;
		next: PatternPtr
	END;

	MetricDesc* = RECORD
		dx*, x*, y*, filler: INTEGER;
		p*: PatternDesc;
	END;

	Font* = POINTER TO Bytes;
	Bytes* = RECORD
		metrics*: ARRAY 256 OF MetricDesc;
		hfont*: LONGINT;	(* handle to GDI font on screen *)
		family*: ARRAY 32 OF CHAR;
		size*: LONGINT;
		style*: SET;
		oberon*: BOOLEAN; (* TRUE if font uses Oberon character codes *)
		file*: ARRAY 64 OF CHAR (* raster font file *)
	END;
	
	MouseState = RECORD
		x, y: INTEGER; keys: SET
	END;

	WndProcList = POINTER TO WndProcListDesc;
	WndProcListDesc = RECORD
		wndProc: User32.WindowProc;
		msg: LONGINT;
		next: WndProcList
	END;

VAR
	kbNofChars, kbIn, kbOut: INTEGER;
	kbBuf: ARRAY kbBufSize OF CHAR;

	msNofEntries, msIn, msOut: INTEGER;
	msBuf: ARRAY msBufSize OF MouseState;
	msLastX, msLastY: INTEGER; msLastKeys: SET;
	T: ARRAY 256 OF CHAR;
	WinToOberon: ARRAY 256 OF CHAR;  (* ascii code translation Windows -> Oberon *)
	OberonToWin-: ARRAY 256 OF CHAR;  (* ascii code translation Oberon -> Windows *)
	ApplicationName-, Title: ARRAY 32 OF CHAR;
	hPrevInst, mod: LONGINT;

	CurrentCursor*, arrowCur-: LONGINT;

	(** Upcall for messages not handled by the default Oberon Window handler. *)
	wndProcs: WndProcList;
	windowRect: User32.Rect;

	(* ------------------- Display Output ---------------------- *)

CONST
	replace = 0; paint = 1; (* modes *)
	LineCacheSize = 256;

VAR
	OS-: RECORD
				platform-: LONGINT;  (** 0 = Windows NT, 1 = Win32s on Windows 3.1 **)
				major-, minor-: LONGINT;
			END;
	DispW-, DispH-: LONGINT;
	Display-: LONGINT;	(** handle to Oberon window **)
	hdcDisp-: LONGINT;	(** handle to device context for Oberon window **)

	Black-, White-: GDI32.COLORREF;
	Backg-, Foreg: GDI32.COLORREF;
	BackgRop-, ForegRop-: LONGINT; (* ROP-codes for background and foreground *)

	cc*: RECORD	(** character cache **)
		pat*: Pattern;
		font*: Font;
		ch*: CHAR;
		dx*, x*, y*: LONGINT
	END;

	lc*: RECORD	(** line cache **)
		len-: LONGINT;
		cache: ARRAY LineCacheSize OF CHAR;
		font: Font;
		x0, y0, x, col, mode: LONGINT
	END;

	dc*: RECORD	(** device context cache **)
		hfont*: LONGINT;
		textCol*: GDI32.COLORREF;
		brushCol*: GDI32.COLORREF;	(** color of solid brush, or -1 *)
		bkCol*: GDI32.COLORREF;
		bkMode*: INTEGER;	(** transparent, opaque **)
		penCol*: GDI32.COLORREF;	(** color of solid pen, width 0 **)
		pat*: PatternPtr;	(** pattern of pattern brush, or NIL **)
		x*, y*, w*, h*: LONGINT	(** cached clipping rectangle in Oberon Display coordinates **)
	END;

	PatternList: PatternPtr;	(* list of all created paterns; prevents them from beeing collected *)

	(* ------ color support -------- *)

CONST
	MaxPaletteSize = 256;
	PCReserved = 1X;	(* flags in PaletteEntry *)

TYPE
	PaletteEntry = RECORD;
		red, green, blue: CHAR; (* 0 .. 0FFH *)
		flags: CHAR;
	END;

	Palette = RECORD
		version: INTEGER;
		size: INTEGER;
		col: ARRAY MaxPaletteSize OF PaletteEntry;
	END;

VAR
	Pal: Palette;
	hPalette: LONGINT; (** handle to logical palette **)
	Depth-: LONGINT;	(** screen depth **)
	NumColors: LONGINT;	(* must be < MaxPaletteSize *)
	
	ColTrans*, RevColTrans*: ARRAY 256 OF INTEGER;
	usesystemcolors: BOOLEAN;

VAR
	fromExit, kioskmode, verbose: BOOLEAN;
	updateDisplay*: LONGINT;
	defocus*: BOOLEAN;
	updateRect*: User32.Rect;
	displayMtx*, eventMtx*: Threads.Mutex;
	thread: Threads.Thread;
	dispReady, oldDisplay, smallWin: BOOLEAN;
	accelTab: ARRAY 32 OF User32.Accel;
	accelCmds: ARRAY 32 OF ARRAY 64 OF CHAR;
	hAccel, nAccel: LONGINT;
	accelCmd*: ARRAY 64 OF CHAR;

	(* ------ pattern ---------- *)

PROCEDURE PatternTermHandler;
	VAR p: PatternPtr;
BEGIN
	p := PatternList;
	WHILE p # NIL DO
		IF p.bitmap # Kernel32.NULL THEN GDI32.DeleteObject(p.bitmap) END;
		p := p.next
	END
END PatternTermHandler;

PROCEDURE SpecialKey(key: ARRAY OF CHAR; code: CHAR);
	VAR str: ARRAY 8 OF CHAR; F: LONGINT; ch: CHAR;
BEGIN
	Registry.GetKeyValue(Registry.CurrentUser, Registry.oberonSystem, key, str);
	Strings.Upper(str, str); ch := 0X;
	IF str = "ESC" THEN
		ch := CHR(27)
	ELSIF (str[0] = "F") & (str[1] >= "0") THEN
		F := ORD(str[1])-ORD("0");
		IF str[2] >= "0" THEN
			F := 10*F + ORD(str[2])-ORD("0")
		END;
		CASE F OF
			4: ch := CHR(0A7H)
			|5: ch := CHR(0F5H)
			|6: ch := CHR(0F6H)
			|7: ch := CHR(0F7H)
			|10: ch := CHR(0FAH)
		ELSE
		END
	END;
	IF ch # 0X THEN
		WinToOberon[ORD(ch)] := code
	END
END SpecialKey;

PROCEDURE InitTranslations;
	VAR i, k, bit, val: LONGINT; str: ARRAY 8 OF CHAR;
BEGIN
	i := 0;
	WHILE i < 256 DO k := i; bit := 0; val := 0;
		WHILE bit < 8 DO val := val * 2;
			IF ODD(k) THEN INC(val) END;
			k := k DIV 2; INC(bit);
		END;
		T[i] := CHR(val); INC(i);
	END;
	(* ascii code translation *)
	FOR i := 0 TO 255 DO
		WinToOberon[i] := Strings.ISOToOberon[i];
		OberonToWin[i] := Strings.OberonToISO[i]
	END;
	WinToOberon[27] := 0A5X; (* ESC -> Neutralise *)
	SpecialKey("SetupKey", 0A4X);
	SpecialKey("NeutraliseKey", 0A5X);
	SpecialKey("ESCKey", CHR(27));
	Registry.GetKeyValue(Registry.CurrentUser, Registry.oberonSystem, "Verbose", str);
	verbose := CAP(str[0]) = "Y"
END InitTranslations;

PROCEDURE NewPattern*(VAR image: ARRAY OF SET; w, h: LONGINT; VAR pattern: Pattern);
	VAR
		pat: PatternPtr;
		buf: ARRAY 32*64 OF CHAR;
		x, y, adr, i: LONGINT;
		ch: CHAR;
BEGIN
	NEW(pat); pat.x := 0; pat.y := 0;
	pat.next := PatternList; PatternList := pat;
	pat.w := SHORT(w); pat.h := SHORT(h);
	y := pat.h-1; i := 0;
	WHILE y >= 0 DO
		x := 0; adr := S.ADR(image[y]);
		WHILE x < pat.w DO
			S.GET(adr, ch); INC(adr);
			buf[i] := T[ORD(ch)]; INC(i);
			INC(x, 8)
		END;
		WHILE (i MOD 2) # 0 DO
			buf[i] := 0X; INC(i)
		END;
		DEC(y)
	END;
	pat.bitmap := GDI32.CreateBitmap(w, h, 1, 1, S.ADR(buf[0]));
	pattern := S.VAL(Pattern, pat)
END NewPattern;

	(* ------ color support -------- *)

PROCEDURE PaletteIndex* (index: LONGINT): GDI32.COLORREF;
BEGIN RETURN S.VAL(GDI32.COLORREF, S.VAL(SET, index) + S.VAL(SET, 01000000H))
END PaletteIndex;

PROCEDURE InitPalette;
VAR i, j: INTEGER; res: LONGINT; used: ARRAY 256 OF BOOLEAN; s: ARRAY 64 OF CHAR; flag: CHAR;
	PROCEDURE SetColor(i, red, green, blue: INTEGER; mode: CHAR);
	BEGIN
		Pal.col[i].red := CHR(red); Pal.col[i].green := CHR(green); Pal.col[i].blue := CHR(blue); Pal.col[i].flags := mode
	END SetColor;
BEGIN
	Registry.GetKeyValue(Registry.CurrentUser, Registry.oberonSystem, "UseSystemColors", s);
	usesystemcolors := (Registry.res = Registry.Done) & (s[0] = "Y");
	IF usesystemcolors & verbose THEN C.Str("Trying to use Windows SystemColors"); C.Ln END;

	Pal.version := 0300H; Pal.size := SHORT(NumColors);
	
	res := GDI32.GetSystemPaletteEntries(hdcDisp, 0, 256, S.ADR(Pal.col)); (* ensure it is a system palette *)
	IF verbose THEN C.Str("GetSystemPaletteEntries reports "); C.Int(res); C.Str(" system colors"); C.Ln() END;
	IF res = 256 THEN
		FOR i := 0 TO 255 DO used[i] := FALSE END;
		
		ColTrans[0] := 255; (* white *)
		ColTrans[1] := 249; (* red *)
		ColTrans[2] := 250; (* green *)
		ColTrans[3] := 252; (* blue *)
		ColTrans[4] := 253; (* magenta *)
		ColTrans[5] := 251; (* yellow *)
		ColTrans[6] := 254; (* cyan *)
		ColTrans[7] := 1; (* dark red *)
		ColTrans[8] := 2; (* dark green *)
		ColTrans[9] := 4; (* dark blue *)
		ColTrans[10] := 9; (* sky blue *)
		ColTrans[11] := 6; (* dark cyan *)
		ColTrans[12] := 248; (* dark grey *)
		ColTrans[13] := 247; (* medium grey *)
		ColTrans[14] := 7; (* light grey *)
		ColTrans[15] := 0; (* black *)
		
		(* next four colors are also mapped to the system palette *)
		ColTrans[16] := 3;
		ColTrans[17] := 5;
		ColTrans[18] := 8;
		ColTrans[19] := 246;
		
		FOR i := 0 TO 19 DO used[ColTrans[i]] := TRUE END;
		j := 0;
		FOR i := 20 TO 255 DO
			WHILE used[j] DO INC(j) END;
			ColTrans[i] := j; used[j] := TRUE
		END;
		FOR i := 0 TO 255 DO RevColTrans[ColTrans[i]] := i END;

		i := 0;
		IF usesystemcolors THEN flag := PCReserved ELSE flag := 0X END;
		WHILE i < 10 DO Pal.col[i].flags := flag; INC(i) END;
		WHILE i < 246 DO SetColor(i, 0, 0, 0, PCReserved); INC(i) END;
		WHILE i < 256 DO Pal.col[i].flags := flag; INC(i) END;
		
		IF usesystemcolors THEN Pal.col[0].flags := 0X; Pal.col[255].flags := 0X END;
		
		Black := PaletteIndex(0); White := PaletteIndex(255);
		Backg := PaletteIndex(255); Foreg := PaletteIndex(0);
	ELSE (* use Window's color mapping, no identity palette *)
		(* Important in color modes:
		The first 16 colors are selected in such a way that they map to a color in the windows system palette. Changing the
		color settings will cause less colors to be available for Oberon. Because the colors are mapped to the system
		palette colors, XOR works correctly for the lower color values, and no palette changes are allowed.
		The remaining four system colors are not used, meaning that oberon has 256 - 4= 252 colors available.
		This also means that the grey scales are slightly darker than other Oberon versions.
		*)
		FOR i := 0 TO 255 DO ColTrans[i] := i; RevColTrans[i] := i END;
		SetColor(0, 0FFH, 0FFH, 0FFH, 0X); (* white *)
		SetColor(1, 255  , 0  , 0  , 0X); (* red *)
		SetColor( 2, 0  , 255  , 0  , 0X);	(* green *)
		SetColor(3, 0  ,  0  ,  255  , 0X);	(* blue*)
		SetColor(4, 255  , 0  , 255  , 0X);	(* magenta *)
		SetColor(5,  255  , 255  ,  0  , 0X); (* yellow *)
		SetColor( 6, 0  ,  255  ,  255  , 0X);	 (*cyan *)
		SetColor( 7, 128(*170*)  , 0  , 0  , 0X);	(* dark red *)
		SetColor( 8, 0  , 128(*154*)  , 0  , 0X);	(* dark green *)
		SetColor( 9, 0  , 0  , 128(*154*)  , 0X);	(* dark blue *)
		SetColor(10, 0A6H, 0CAH,  0F0H, 0X); (* sky blue *)
		SetColor(11, 0, 080H, 080H, 0X); (* dark cyan *)
		SetColor(12, 80H (*138*)  , 80H (*138*)  , 80H (*138*)  , 0X); (* dark grey *)
		SetColor(13, 0A0H (*190*)  , 0A0H (*190*)  , 0A0H (*190*)  , 0X); (* medium grey *)
		SetColor(14, 0C0H (*223*)  , 0C0H (*223*)  , 0C0H (*223*)  , 0X); (* light grey *)
		SetColor(15, 0, 0, 0, 0X); (* black *)
		i := 16; WHILE i < NumColors DO SetColor(i, i, i, i, PCReserved); INC(i) END;
		Black := PaletteIndex(15); White := PaletteIndex(0);
		Backg := PaletteIndex(0); Foreg := PaletteIndex(15);
		
		usesystemcolors := FALSE
	END;
					
	hPalette := GDI32.CreatePalette(S.ADR(Pal));
	BackgRop := GDI32.WHITENESS; ForegRop := GDI32.BLACKNESS;
	IF usesystemcolors THEN
		res := GDI32.SetSystemPaletteUse(hdcDisp, 2)
	END
END InitPalette;

PROCEDURE UpdatePalette* (index, red, green, blue: LONGINT);	(* does not yet work *)
BEGIN
	Pal.col[index].red := CHR(red); Pal.col[index].green := CHR(green); Pal.col[index].blue := CHR(blue);
	Pal.col[index].flags := PCReserved;
	GDI32.AnimatePalette(hPalette, index, 1, S.ADR(Pal.col[index]));
END UpdatePalette;

PROCEDURE GetColor* (col: LONGINT; VAR red, green, blue: INTEGER);
	VAR p: PaletteEntry;
BEGIN
	GDI32.GetPaletteEntries(hPalette, col, 1, S.ADR(p));
	red := ORD(p.red); green := ORD(p.green); blue := ORD(p.blue);
END GetColor;

PROCEDURE - RetVal(): LONGINT;
PROCEDURE DeletePaletteAndDC;	(* installed as termination handler *)
BEGIN
	GDI32.SelectPalette(hdcDisp, GDI32.GetStockObject(15 (*DEFAULT_PALETTE*)), 0);
	hPalette := RetVal(); 
	GDI32.DeleteObject(hPalette); hPalette := Kernel32.NULL; User32.ReleaseDC(Display, hdcDisp)
END DeletePaletteAndDC;

	(* --------------- device context cacheing ------------------ *)

PROCEDURE InitDeviceContext;
	CONST TABaseline = 24; TALeft = 0;
	VAR br: LONGINT; s: ARRAY 4 OF CHAR;
BEGIN
	GDI32.GetDeviceCaps(hdcDisp, 104 (*SIZEPALETTE*));
	InitPalette;
	IF hPalette # Kernel32.NULL THEN GDI32.SelectPalette(hdcDisp, hPalette, 0 (*FALSE*)) END;
	GDI32.RealizePalette(hdcDisp);
	GDI32.SetTextAlign(hdcDisp, TABaseline + TALeft);
	dc.hfont := Kernel32.NULL;
	GDI32.SetTextColor(hdcDisp, Foreg); dc.textCol := Foreg;
	GDI32.SetBkColor(hdcDisp, Backg); dc.bkCol := Backg;
	GDI32.SetBkMode(hdcDisp, GDI32.Opaque); dc.bkMode := GDI32.Opaque;
	br := GDI32.SelectObject(hdcDisp, GDI32.CreateSolidBrush(Backg)); GDI32.DeleteObject(br); dc.brushCol := Backg;
	dc.penCol := -1;
	Depth := GDI32.GetDeviceCaps(hdcDisp, 12 (*BITSPIXEL*));
	
	Registry.GetKeyValue(Registry.CurrentUser, Registry.oberonSystem, "Monochrome", s);
	IF (Registry.res = Registry.Done) & (s[0] = "Y") THEN
		Depth := 1;
		IF verbose THEN C.Str("Switching to monochrome mode"); C.Ln() END
	END
END InitDeviceContext;

PROCEDURE SetBackgCol* (col: GDI32.COLORREF);
BEGIN
	IF dc.bkCol # col THEN GDI32.SetBkColor(hdcDisp, col); dc.bkCol := col END;
END SetBackgCol;

PROCEDURE SetTextCol* (col: GDI32.COLORREF);
BEGIN
	IF dc.textCol # col THEN GDI32.SetTextColor(hdcDisp, col); dc.textCol := col END;
END SetTextCol;

PROCEDURE SetBrushColor* (col: GDI32.COLORREF);
	VAR br: LONGINT;
BEGIN
	IF dc.brushCol # col THEN
		br := GDI32.SelectObject(hdcDisp, GDI32.CreateSolidBrush(col)); GDI32.DeleteObject(br);
		dc.brushCol := col; dc.pat := NIL
	END;
END SetBrushColor;

PROCEDURE SetPatternBrush* (pat: PatternPtr);
	VAR br: LONGINT;
BEGIN
	IF dc.pat # pat THEN
		br := GDI32.SelectObject(hdcDisp, GDI32.CreatePatternBrush(pat.bitmap)); GDI32.DeleteObject(br);
		dc.pat := pat; dc.brushCol := -1;
	END
END SetPatternBrush;

PROCEDURE FlushCache*;
	VAR colref: LONGINT;
BEGIN
	colref := PaletteIndex(lc.col);
	IF dc.hfont # lc.font.hfont THEN
		GDI32.SelectObject(hdcDisp, lc.font.hfont); dc.hfont := lc.font.hfont;
	END;
	IF dc.textCol # colref THEN GDI32.SetTextColor(hdcDisp, colref); dc.textCol := colref END;
	CASE lc.mode OF
	| paint, replace: (* replace = paint *)
		IF dc.bkMode # GDI32.Transparent THEN GDI32.SetBkMode(hdcDisp, GDI32.Transparent); dc.bkMode := GDI32.Transparent END;
		GDI32.TextOut(hdcDisp, lc.x0, DispH-lc.y0, S.ADR(lc.cache), lc.len)
	ELSE (* invert not implemented *)
	END;
	lc.len := 0; GDI32.GdiFlush
END FlushCache;

PROCEDURE SetClippingArea* (x, y, w, h: LONGINT); (** flushes line cache if area changes **)
	VAR rgn: LONGINT;
BEGIN
	IF (dc.x # x) OR (dc.y # y) OR (dc.w # w) OR (dc.h # h) THEN
		IF lc.len > 0 THEN FlushCache END;
		IF w < 0 THEN w := 0 END; IF h < 0 THEN h := 0 END;
		rgn := GDI32.CreateRectRgn(x, DispH-y, x+w, DispH-(y+h));
		GDI32.SelectObject(hdcDisp, rgn);
		GDI32.DeleteObject(rgn);
		dc.x := x; dc.y := y; dc.w := w; dc.h := h;
	END;
END SetClippingArea;

PROCEDURE CacheCharacter*(x, y, col, mode: LONGINT);
BEGIN
	IF (cc.dx > 0) & (cc.ch # 9X) THEN (* << *)
		IF lc.len = 0 THEN
			lc.cache[0] := cc.ch; lc.len := 1; lc.font := cc.font; lc.col := col; lc.mode := mode;
			lc.x0 := x - cc.x; lc.y0 := y - cc.y; lc.x := lc.x0 + cc.dx;
		ELSIF  (lc.font # cc.font) OR ((x - cc.x) # lc.x) OR ((y - cc.y) # lc.y0) OR
				(col # lc.col) OR (mode # lc.mode) OR (lc.len = LineCacheSize)
		THEN
			IF lc.len > 0 THEN FlushCache END;
			lc.cache[0] := cc.ch; lc.len := 1; lc.font := cc.font; lc.col := col; lc.mode := mode;
			lc.x0 := x - cc.x; lc.y0 := y - cc.y; lc.x := lc.x0 + cc.dx;
		ELSE (* append *)
			lc.cache[lc.len] := cc.ch; INC(lc.len); INC(lc.x, cc.dx)
		END
	END
END CacheCharacter;

	(* -------------- raster operatons ------------------ *)

PROCEDURE SyncDisplay*; (** flushes line cache and GDI queue **)
BEGIN
	IF lc.len > 0 THEN FlushCache END;
	GDI32.GdiFlush;
END SyncDisplay;

	(* ------------------ Keyboard Input ----------------------- *)

PROCEDURE Available* (): INTEGER;
BEGIN
	SyncDisplay; (*WaitMessage;*)
	RETURN kbNofChars
END Available;

PROCEDURE PutChar* (ch: CHAR);
BEGIN
	IF (kbNofChars < kbBufSize) THEN kbBuf[kbIn] := ch; kbIn := (kbIn+1) MOD kbBufSize; INC(kbNofChars);
		Threads.Set(Threads.win32Event)
	END;
END PutChar;

PROCEDURE GetChar* (VAR ch: CHAR);
BEGIN
	SyncDisplay; (*WaitMessage;*)
	WHILE kbNofChars <= 0 DO (*PollEventQueue*) END;
	DEC(kbNofChars); ch := kbBuf[kbOut]; kbOut := (kbOut+1) MOD kbBufSize
END GetChar;

	(* --------------------- Mouse Input ---------------------- *)

PROCEDURE Mouse* (VAR keys: SET; VAR x, y: INTEGER);
BEGIN
	Threads.Pass();
	SyncDisplay; (*PollEventQueue;*)
	IF msNofEntries <= 0 THEN keys := msLastKeys; x := msLastX; y := msLastY;
	ELSE
		keys := msBuf[msOut].keys; x := msBuf[msOut].x; y := msBuf[msOut].y;
		msOut := (msOut + 1) MOD msBufSize; DEC(msNofEntries);
	END;
	IF kioskmode THEN
		IF keys # {} THEN keys := {1} END
	END
END Mouse;

	(* ------------------ Window Procedure -------------------- *)

	PROCEDURE addAccel(vKey: LONGINT; state: SET; cmd: ARRAY OF CHAR; virtKey: BOOLEAN);
		VAR a: User32.Accel; i: LONGINT; buf: ARRAY 512 OF CHAR;
	BEGIN
		IF (vKey >= ORD("A")) & (vKey <= ORD("Z")) & (state = {CTRL}) THEN
			vKey := vKey-ORD("A")+1; state := {}
		END;
		IF virtKey THEN
			i := User32.FVirtKey
		ELSE
			i := 0
		END;
		IF ALT IN state THEN INC(i, User32.FAlt) END;
		IF SHIFT IN state THEN INC(i, User32.FShift) END;
		IF CTRL IN state THEN INC(i, User32.FControl) END;
		a.fVirt := CHR(i); a.key := SHORT(vKey); a.cmd := SHORT(nAccel);
		i := 0;
		WHILE (i < nAccel) & ~((accelTab[i].fVirt = a.fVirt) & (accelTab[i].key = a.key)) DO
			INC(i)
		END;
		IF (cmd = "") & (i < nAccel) THEN
HALT(99)
		ELSIF cmd # "" THEN
			IF i >= nAccel THEN
				COPY(cmd, accelCmds[nAccel]);
				accelTab[nAccel] := a; INC(nAccel)
			ELSE
			COPY(cmd, accelCmds[i])
			END
		END;
		IF hAccel # Kernel32.NULL THEN
			User32.DestroyAcceleratorTable(hAccel)
		END;
		i := 0;
		WHILE i < nAccel DO
			S.MOVE(S.ADR(accelTab[i]), S.ADR(buf[i*6]), 6); INC(i)
		END;
		hAccel := User32.CreateAcceleratorTable(S.ADR(buf[0]), nAccel)
	END addAccel;

	PROCEDURE AddAccel*(key: CHAR; state: SET; cmd: ARRAY OF CHAR);
		VAR vKey: LONGINT;
	BEGIN
		CASE key OF
			PageUp: vKey := User32.VKPageUp
			|PageDown: vKey := User32.VKPageDown
			|End: vKey := User32.VKEnd
			|Home: vKey := User32.VKHome
			|Left: vKey := User32.VKLeft
			|Up: vKey := User32.VKUp
			|Right: vKey := User32.VKRight
			|Down: vKey := User32.VKDown
			|Insert: vKey := User32.VKInsert
			|Delete: vKey := User32.VKDelete
		ELSE
			vKey := ORD(OberonToWin[ORD(key)]);
			addAccel(vKey, state, cmd, FALSE);
			RETURN
		END;
		addAccel(vKey, state, cmd, TRUE)
	END AddAccel;

	PROCEDURE AddFAccel*(F: INTEGER; state: SET; cmd: ARRAY OF CHAR);
	BEGIN
		addAccel(User32.VKF1+F-1, state, cmd, TRUE)
	END AddFAccel;

PROCEDURE ToMouse(lParam: LONGINT);
BEGIN
	msLastX := SHORT(Kernel32.LoWord(lParam));
	IF msLastX < 0 THEN
		msLastX := 0
	ELSIF msLastX >= DispW THEN
		msLastX := SHORT(DispW-1)
	END;
	msLastY := SHORT(DispH - Kernel32.HiWord(lParam) - 1);
	IF msLastY < 0 THEN
		msLastY := 0
	ELSIF msLastY >= DispH THEN
		msLastY := SHORT(DispH-1)
	END
END ToMouse;

PROCEDURE UpdateDisplay(VAR rect: User32.Rect);
BEGIN
	Threads.Lock(eventMtx);
	IF updateDisplay <= 0 THEN
		updateRect := rect; INC(updateDisplay)
	ELSE
		IF rect.left < updateRect.left THEN updateRect.left := rect.left END;
		IF rect.right > updateRect.right THEN updateRect.right := rect.right END;
		IF rect.top < updateRect.top THEN updateRect.top := rect.top END;
		IF rect.bottom > updateRect.bottom THEN updateRect.bottom := rect.bottom END
	END;
	IF ~oldDisplay THEN
		User32.ValidateRect(Display, S.ADR(rect))
	END;
	Threads.Unlock(eventMtx);
	Threads.Set(Threads.win32Event); SyncDisplay()
END UpdateDisplay;

PROCEDURE GetMinMaxInfo(window: LONGINT; uParam, lParam: LONGINT): LONGINT;
	VAR mm: User32.MinMaxInfo;
BEGIN
	IF dispReady THEN
		S.MOVE(lParam, S.ADR(mm), SIZE(User32.MinMaxInfo));
		mm.maxSize.x := windowRect.right-windowRect.left; 
		mm.maxSize.y := windowRect.bottom-windowRect.top;
		IF (mm.maxSize.x <= 0) OR (mm.maxSize.y <= 0) THEN
			User32.GetWindowRect(window, S.ADR(windowRect));
			mm.maxSize.x := windowRect.right-windowRect.left; 
			mm.maxSize.y := windowRect.bottom-windowRect.top
		END;
		mm.minTrack := mm.maxSize; mm.maxTrack := mm.maxSize;
		S.MOVE(S.ADR(mm), lParam, SIZE(User32.MinMaxInfo));
		RETURN 0
	ELSE
		RETURN User32.DefWindowProc(window, User32.WMGetMinMaxInfo, uParam, lParam)
	END
END GetMinMaxInfo;

PROCEDURE [stdcall] WndProc (window: LONGINT; msg: LONGINT; uParam, lParam: LONGINT): LONGINT;
	VAR
		res: LONGINT;
		wndProc: WndProcList;
		rect: User32.Rect;
		W, H: INTEGER;
BEGIN
	res := 0;
	CASE msg OF
	User32.WMChar: lParam := lParam MOD ASH(1, 16);
				WHILE lParam > 0 DO
					PutChar(WinToOberon[uParam]); DEC(lParam)
				END
	| User32.WMKeyDown: CASE uParam OF
				User32.VKCancel: Threads.Break(Threads.oberonLoop)
				| 70H: (*F1*) PutChar(0A4X) (*SETUP*)
				| 71H: (*F2*) PutChar(0A5X) (* Neutralise *)	
				| 72H: (*F3*) PutChar(CHR(27)) (* ESC *)
				| 73H: (*F4*) PutChar(WinToOberon[0A7H])
				| 74H: (*F5*) PutChar(WinToOberon[0F5H])
				| 75H: (*F6*) PutChar(WinToOberon[0F6H])
				| 76H: (*F7*) PutChar(WinToOberon[0F7H])
				| 77H: (*F8*) kioskmode := ~kioskmode; User32.MessageBeep(-1); Threads.Set(Threads.win32Event)
				| 78H: (*F9*) PutChar(0F9X) (* redraw screen *)
				| 79H: (*F10*) PutChar(WinToOberon[0FAH])
				| 25H: (*LEFT ARROW*) PutChar(0C4X)
				| 26H: (*UP ARROW*) PutChar(0C1X)
				| 27H: (*RIGHT ARROW*) PutChar(0C3X)
				| 28H: (*DOWN ARROW*) PutChar(0C2X)
				| 23H: (*END*) PutChar(0A9X); (* << jm *)
				| 24H: (*HOME*)  PutChar(0A8X); (* << jm *)
				| 2DH: (*INSERT*) PutChar(0A0X);
				| 2EH: (*DELETE*) PutChar(0A1X);
				| 21H: (*PAGE-UP*) PutChar(0A2X);	(* << jm *)
				| 22H: (*PAGE-DOWN*) PutChar(0A3X)  (* << jm *)
			ELSE
			END
	| 201H .. 209H: (* all mouse downs and ups *)
		IF msLastKeys = {} THEN User32.SetCapture(Display) END;
		msLastKeys := {};
		IF ODD(uParam) THEN INCL(msLastKeys, ML) END;
		IF ODD(uParam DIV 10H) THEN INCL(msLastKeys, MM) END;
		IF ODD(uParam DIV 2) THEN INCL(msLastKeys, MR) END;
		IF msLastKeys = {} THEN User32.ReleaseCapture() END;
		ToMouse(lParam);
		IF msNofEntries < msBufSize THEN
			msBuf[msIn].keys := msLastKeys; msBuf[msIn].x := msLastX; msBuf[msIn].y := msLastY;
			msIn := (msIn + 1) MOD msBufSize; INC(msNofEntries); Threads.Set(Threads.win32Event)
		END
	| User32.WMMouseMove: ToMouse(lParam); User32.SetCursor(CurrentCursor); Threads.Set(Threads.win32Event)
	| User32.WMGetMinMaxInfo: res := GetMinMaxInfo(window, uParam, lParam)
	| User32.WMCommand: uParam := Kernel32.LoWord(uParam);
											IF uParam < nAccel THEN
												COPY(accelCmds[uParam], accelCmd);
												Threads.Set(Threads.win32Event)
											END
	ELSE
		IF msg = User32.WMQueryNewPalette THEN
			GDI32.SelectPalette(hdcDisp, hPalette, 0 (*FALSE*));
			GDI32.RealizePalette(hdcDisp)
		ELSE
			CASE msg OF
			User32.WMClose: wndProc := wndProcs;
								WHILE wndProc # NIL DO
									res := wndProc.wndProc(window, msg, uParam, lParam);
									wndProc := wndProc.next
								END;
								IF verbose THEN C.Str("WMClose: calling DestroyWindow(Display)"); C.Ln() END;
								User32.DestroyWindow(Display); res := 0
			|User32.WMPaint: IF User32.GetUpdateRect(window, S.ADR(rect), Kernel32.False) = Kernel32.False THEN
								User32.GetClientRect(window, S.ADR(rect))
							END;
							UpdateDisplay(rect);
							IF oldDisplay THEN
								res := User32.DefWindowProc(window, msg, uParam, lParam)
							END
			|User32.WMSize: IF dispReady THEN
											User32.GetClientRect(window, S.ADR(rect));
											W := SHORT(rect.right - rect.left); H := SHORT(rect.bottom - rect.top);
											IF oldDisplay THEN
												DEC(W, 2); DEC(H, 2)
											END;
											IF (W > 64) & (H > 64) THEN
												DispW := W; DispH := H												
											END;
											UpdateDisplay(rect)
										END;
										IF oldDisplay THEN
											res := User32.DefWindowProc(window, msg, uParam, lParam)
										END
			|User32.WMDestroy: IF fromExit THEN
									IF verbose THEN C.Str("WMDestroy: calling PostQuitMessage(0)"); C.Ln() END;
									User32.PostQuitMessage(0)
								ELSE
									IF verbose THEN C.Str("calling Kernel.Exit(0)"); C.Ln() END;
									Kernel.Exit(0)
								END
			|User32.WMActivate, User32.WMSetFocus, User32.WMKillFocus: defocus := TRUE;
				IF dispReady THEN Threads.Set(Threads.win32Event) END
			|User32.WMSetCursor: User32.SetCursor(CurrentCursor)
			ELSE
				wndProc := wndProcs;
				WHILE (wndProc # NIL) & (wndProc.msg # msg) DO
					wndProc := wndProc.next
				END;
				IF wndProc # NIL THEN
					res := wndProc.wndProc(window, msg, uParam, lParam)
				ELSE
					res := User32.DefWindowProc(window, msg, uParam, lParam)
				END
			END
		END
	END;
	RETURN res
END WndProc;

PROCEDURE RegisterWndProc*(msg: LONGINT; wndProc: User32.WindowProc);
	VAR wProc: WndProcList;
BEGIN
	ASSERT(wndProc # NIL);
	wProc := wndProcs;
	WHILE (wProc # NIL) & (wProc.msg # msg) DO
		wProc := wProc.next
	END;
	IF wProc = NIL THEN
		NEW(wProc); wProc.msg := msg;
		wProc.next := wndProcs; wndProcs := wProc
	END;
	wProc.wndProc := wndProc
END RegisterWndProc;

PROCEDURE UnRegisterWndProc*(wndProc: User32.WindowProc);
	VAR pwProc, wProc: WndProcList;
BEGIN
	ASSERT(wndProc # NIL);
	pwProc := NIL; wProc := wndProcs;
	WHILE wProc # NIL DO
		IF wProc.wndProc = wndProc THEN
			IF pwProc # NIL THEN
				pwProc.next := wProc.next
			ELSE
				wndProcs := wProc.next
			END
		ELSE
			pwProc := wProc
		END;
		wProc := wProc.next
	END
END UnRegisterWndProc;

PROCEDURE InitInstance;
	VAR
		style: LONGINT;
		R: User32.Rect;
		str: ARRAY 16 OF CHAR;
		start: Kernel32.StartupInfo;
BEGIN
	dispReady := FALSE; smallWin := TRUE;
	style := Kernel32.LongOr(User32.WSVisible, User32.WSCaption); style := Kernel32.LongOr(style, User32.WSBorder);
	style := Kernel32.LongOr(style, User32.WSSysMenu); style := Kernel32.LongOr(style, User32.WSMinimizeBox);

	Registry.GetKeyValue(Registry.CurrentUser, Registry.oberonSystem, "Width", str); Strings.StrToInt(str, DispW);
	IF (DispW <= 0) OR (DispW > 2048) THEN
		smallWin := FALSE
	END;
	Registry.GetKeyValue(Registry.CurrentUser, Registry.oberonSystem, "Height", str); Strings.StrToInt(str, DispH);
	IF (DispH <= 0) OR (DispH > 2048) THEN
		smallWin := FALSE
	END;

	IF ~smallWin THEN
		DispW := User32.Default; DispH := User32.Default;
		style := Kernel32.LongOr(style, User32.WSMaximize); style := Kernel32.LongOr(style, User32.WSMaximizeBox)
	END;

	Display := User32.CreateWindowEx(0, S.ADR(ApplicationName), S.ADR(Title), style, User32.Default, User32.Default,
		DispW, DispH, Kernel32.NULL, Kernel32.NULL, Kernel.hInstance, Kernel32.NULL);

	Kernel32.GetStartupInfo(S.ADR(start));
	IF ~smallWin & Kernel32.Includes(start.flags, Kernel32.StartFUseShowWindow) THEN
		User32.ShowWindow(Display, start.showWindow)
	END;

	hdcDisp := User32.GetDC(Display); InitDeviceContext();
	oldDisplay := FALSE; User32.GetClientRect(Display, S.ADR(R));
	DispW := SHORT(R.right - R.left); DispH := SHORT(R.bottom - R.top);

	IF OS.major < 4 THEN
		DEC(DispW, 2); DEC(DispH, 2); oldDisplay := TRUE
	END;
	User32.GetWindowRect(Display, S.ADR(R));
	dispReady := TRUE; Threads.Set(Threads.win32Event)
END InitInstance;

	PROCEDURE GetCursor*(name: ARRAY OF CHAR): LONGINT;
		VAR ret: LONGINT;
	BEGIN
		ret := User32.LoadCursor(Kernel.hInstance, S.ADR(name));
		IF ret = Kernel32.NULL THEN
			ret := arrowCur
		END;
		RETURN ret
	END GetCursor;

PROCEDURE InitApplication;
	VAR
		wc: User32.WindowClassEx;
		name: ARRAY 32 OF CHAR;
BEGIN
	wc.size := SIZE(User32.WindowClassEx);
	wc.style := User32.OwnDC;
	wc.wndProc := WndProc;
	wc.clsExtra := 0; wc.wndExtra := 0;
	wc.instance := Kernel.hInstance;
	name := "Oberon"; wc.icon := User32.LoadIcon(Kernel.hInstance, S.ADR(name));
	name := "OberonSmall"; wc.iconSm := User32.LoadIcon(Kernel.hInstance, S.ADR(name));
	name := "Arrow"; wc.cursor := User32.LoadCursor(Kernel.hInstance, S.ADR(name));
	IF wc.cursor = Kernel32.NULL THEN
		wc.cursor := User32.LoadCursor(Kernel32.NULL,User32.IDCArrow)
	END;
	wc.bgnd := GDI32.CreateSolidBrush(PaletteIndex(12));
	wc.menuName := Kernel32.NULL; wc.className := S.ADR(ApplicationName);
	User32.RegisterClassEx(S.ADR(wc));
	arrowCur := wc.cursor; CurrentCursor := arrowCur;
	hPrevInst := Kernel.hInstance
END InitApplication;

PROCEDURE *WinMain();
	VAR
		msg: User32.Msg;
		ret: LONGINT;
BEGIN
	IF hPrevInst = Kernel32.NULL THEN InitApplication() END;
	InitInstance();
	ret := User32.GetMessage(S.ADR(msg), Kernel32.NULL, 0, 0);
	WHILE ret # Kernel32.False DO
		IF ret > 0 THEN
			DEC(Kernel.GCenabled);
			IF User32.TranslateAccelerator(msg.hwnd, hAccel, S.ADR(msg)) = 0 THEN 
				User32.TranslateMessage(S.ADR(msg));
				User32.DispatchMessage(S.ADR(msg))
			END;
			INC(Kernel.GCenabled)
		END;
		ret := User32.GetMessage(S.ADR(msg), Kernel32.NULL, 0, 0)
	END;
	IF verbose THEN C.Str("leaving EventLoop: Kernel.Exit(0)"); C.Ln() END;
	Kernel.Exit(0)
END WinMain;

	(* ---------------------- general ------------------------- *)

PROCEDURE Exit*(err: LONGINT);
BEGIN
	fromExit := TRUE;
	err := User32.SendMessage(Display, User32.WMClose, err, 0)
END Exit;

PROCEDURE Terminate;
BEGIN
	PatternTermHandler; DeletePaletteAndDC;
	IF hAccel # Kernel32.NULL THEN
		User32.DestroyAcceleratorTable(hAccel)
	END
END Terminate;

	PROCEDURE *AddHotKey(cmd, keys: ARRAY OF CHAR);
		VAR
			i, j: LONGINT;
			str: ARRAY 16 OF CHAR;
			state: SET;
			F: INTEGER;
			key, ch, old: CHAR;
	BEGIN
		state := {}; key := 0X; F := 0; i := 0;
		WHILE keys[i] # 0X DO
			ch := keys[i];
			IF ch = "," THEN
				IF key # 0X THEN
					AddAccel(key, state, cmd)
				ELSIF F > 0 THEN
					AddFAccel(F, state, cmd)
				END;
				state := {}; key := 0X; F := 0; INC(i)
			ELSIF ch > " " THEN
				j := 0; old := ch;
				WHILE (ch > " ") & (ch # ",") DO
					IF (ch >= "a") & (ch <= "z") THEN
						ch := CAP(ch)
					END;
					str[j] := ch; INC(i); INC(j);
					ch := keys[i]
				END;
				str[j] := 0X;
				IF str = "CTRL" THEN
					INCL(state, CTRL)
				ELSIF str = "SHIFT" THEN
					INCL(state, SHIFT)
				ELSIF str = "ALT" THEN
					INCL(state, ALT)
				ELSIF str = "PAGEUP" THEN
					key := PageUp
				ELSIF str = "PAGEDOWN" THEN
					key := PageDown
				ELSIF str = "END" THEN
					key := End
				ELSIF str = "HOME" THEN
					key := Home
				ELSIF str = "LEFT" THEN
					key := Left
				ELSIF str = "UP" THEN
					key := Up
				ELSIF str = "RIGHT" THEN
					key := Right
				ELSIF str = "DOWN" THEN
					key := Down
				ELSIF str = "INSERT" THEN
					key := Insert
				ELSIF str = "DELETE" THEN
					key := Delete
				ELSIF (str[0] = "F") & (str[1] >= "0") THEN
					F := ORD(str[1])-ORD("0");
					IF str[2] >= "0" THEN
						F := 10*F + ORD(str[2])-ORD("0")
					END
				ELSE
					key := old
				END
			ELSE
				INC(i)
			END
		END;
		IF key # 0X THEN
			AddAccel(key, state, cmd)
		ELSIF F > 0 THEN
			AddFAccel(F, state, cmd)
		END
	END AddHotKey;

BEGIN
	hPrevInst := Kernel32.NULL;
	NumColors := 256; wndProcs := NIL;
	mod := Kernel32.GetVersion();
	IF mod > 0 THEN OS.platform := 0 ELSE OS.platform := 1 END;
	OS.major := mod MOD 100H; OS.minor := (mod DIV 100H) MOD 100H;
	kbNofChars := 0; kbIn := 0; kbOut := 0; (* keyboard buffer initialisation *)
	msNofEntries := 0; msIn := 0; msOut := 0; (* mouse buffer initialisation *)
	msLastX := 0; msLastY := 0; msLastKeys := {};
	PatternList := NIL;
	hPalette := Kernel32.NULL;
	InitTranslations;
	defocus := FALSE; updateDisplay := 0;
	NEW(displayMtx); Threads.Init(displayMtx);
	NEW(eventMtx); Threads.Init(eventMtx);
	ApplicationName := "Oberon(TM)"; Title := "Oberon System 3";
	NEW(thread); thread.name := "Win32.WinMain";
	Threads.Start(thread, WinMain, 0);
	Modules.InstallTermHandler(Terminate);
	mod := GDI32.GdiSetBatchLimit(255);
	fromExit := FALSE; kioskmode := FALSE;
	nAccel := 0; hAccel := Kernel32.NULL;
	Registry.OberonPath("HotKeys", accelCmd);
	Registry.EnumerateKeyValue(Registry.CurrentUser, accelCmd, AddHotKey);
	accelCmd := ""
END Win32.

(** Remark:

1. Programmers should be discouraged from using this module as it results in highly unportable code.

*)
