(* OBERON System 3, Release 2.2.

Copyright 1996, 1997 Team of the Institute of Computer Systems of ETH Zürich, ETH Center, CH-8092 Zürich,
e-mail: oberon@inf.ethz.ch.

This module may be used under the conditions of the general Oberon System 3 license contract.
The full text can be downloaded from

	"ftp://ftp.inf.ethz.ch/pub/software/Oberon/System3/license.txt;A"

or requested from the above mentioned address.

Under the license terms stated it is in particular (a) prohibited to modify the interface of this module
in any way that disagrees with style or content of the system and (b) requested to provide all conversions
of the source code to another platform with the name OBERON. *)

MODULE Clipboard;	(* MH 3.12.93; based on a semester project by A. Hendseth and M. Hölzel/ jm 17.1.95 *)
	IMPORT S := SYSTEM, Kernel32, User32, Files, Win32, Strings, Display, Fonts, Texts, Viewers, Oberon;

(*
	7.12.95 - fixed bug with copying objects (ps)
	12.12.95 - added support for oberon text (ejz)
	18.2.96 - added OberonToWin & WinToOberon conversion (ejz)
*)

	VAR
		W: Texts.Writer;

	PROCEDURE PutToClipboard (T: Texts.Text; beg, end: LONGINT);
		VAR
			R: Texts.Reader;
			ret, h, data, size, adr: LONGINT;
			buf: Texts.Buffer; t: Texts.Text; f: Files.File; r: Files.Rider;
			ch: CHAR;
	BEGIN
		ret := User32.OpenClipboard(Win32.Display);
		IF ret # Kernel32.False THEN
			User32.EmptyClipboard();
			IF User32.CFOberon # 0 THEN
				NEW(buf); Texts.OpenBuf(buf);
				Texts.Save(T, beg, end, buf);
				NEW(t); Texts.Open(t, "");
				Texts.Append(t, buf);
				f := Files.New(""); Files.Set(r, f, 0); Files.WriteLInt(r, 0);
				Texts.Store(t, f, Files.Pos(r), size);
				h := Kernel32.GlobalAlloc(Kernel32.GMemMoveable, Files.Length(f));
				IF h # Kernel32.NULL THEN
					Files.Set(r, f, 0); Files.WriteLInt(r, Files.Length(f)-4);
					adr := Kernel32.GlobalLock(h);
					Files.Set(r, f, 0); Files.Read(r, ch);
					WHILE ~r.eof DO
						S.PUT(adr, ch); INC(adr);
						Files.Read(r, ch)
					END;
					Kernel32.GlobalUnlock(h);
					data := User32.SetClipboardData(User32.CFOberon, h)
				END
			END;
			Texts.OpenReader(R, T, beg); size := 0;
			WHILE Texts.Pos(R) < end DO Texts.Read(R, ch);
				IF R.lib IS Fonts.Font THEN
					IF ch = 0DX THEN INC(size, 2) ELSE INC(size) END
				END
			END;
			h := Kernel32.GlobalAlloc(Kernel32.GMemMoveable, size + 1);
			adr := Kernel32.GlobalLock(h);
			Texts.OpenReader(R, T, beg);
			WHILE Texts.Pos(R) < end DO Texts.Read(R, ch);
				IF R.lib IS Fonts.Font THEN
					S.PUT(adr, Strings.OberonToISO[ORD(ch)]); INC(adr);
					IF ch = 0DX THEN S.PUT(adr, 0AX); INC(adr) END
				END
			END;
			S.PUT(adr, 0X); Kernel32.GlobalUnlock(h);
			data := User32.SetClipboardData(User32.CFText, h);
			ret := User32.CloseClipboard()
		END
	END PutToClipboard;

	PROCEDURE GetFromClipboard (VAR T: Texts.Text);
		VAR
			ret, h, adr, i: LONGINT;
			f: Files.File; r: Files.Rider;
			ch: CHAR;
	BEGIN
		ret := User32.OpenClipboard(Win32.Display); T := NIL;
		IF ret # Kernel32.False THEN
			h := User32.GetClipboardData(User32.CFOberon);
			IF h # Kernel32.NULL THEN
				adr := Kernel32.GlobalLock(h);
				IF adr # Kernel32.NULL THEN
					f := Files.New(""); Files.Set(r, f, 0);
					FOR i := 0 TO 3 DO
						S.GET(adr, ch); INC(adr); Files.Write(r, ch)
					END;
					Files.Set(r, f, 0); Files.ReadLInt(r, i);
					WHILE i > 0 DO
						S.GET(adr, ch); INC(adr); Files.Write(r, ch);
						DEC(i)
					END
				END;
				Kernel32.GlobalUnlock(h);
				Files.Set(r, f, 0); Files.ReadLInt(r, i); Files.Read(r, ch);
				NEW(T); Texts.Load(T, f, Files.Pos(r), i)
			ELSE
				h := User32.GetClipboardData(User32.CFText);
				IF h # Kernel32.NULL THEN
					adr := Kernel32.GlobalLock(h);
					IF adr # Kernel32.NULL THEN
						NEW(T); Texts.Open(T, "");
						S.GET(adr, ch); INC(adr);
						WHILE ch # 0X DO Texts.Write(W, Strings.ISOToOberon[ORD(ch)]);
							IF ch = 0DX THEN INC(adr) (* skip line feed *) END;
							S.GET(adr, ch); INC(adr);
						END;
						Kernel32.GlobalUnlock(h); Texts.Append(T, W.buf);
					END;
				END
			END;
			ret := User32.CloseClipboard()
		END;
	END GetFromClipboard;

	PROCEDURE Cut*;
		VAR T: Texts.Text; beg, end, time: LONGINT;
	BEGIN
		Oberon.GetSelection(T, beg, end, time);
		IF time > 0 THEN PutToClipboard(T, beg, end); Texts.Delete(T, beg, end) END
	END Cut;

	PROCEDURE Copy*;
		VAR T: Texts.Text; beg, end, time: LONGINT;
	BEGIN
		Oberon.GetSelection(T, beg, end, time);
		IF time > 0 THEN PutToClipboard(T, beg, end) END
	END Copy;

	PROCEDURE Paste*;
		VAR T: Texts.Text; M: Oberon.ConsumeMsg;
	BEGIN
		GetFromClipboard(T);
		IF T # NIL THEN
			M.F := NIL; M.text := T; M.beg := 0; M.end := T.len;
			Display.Broadcast(M);
		END
	END Paste;

	PROCEDURE PictureThis(x, y, w, h: LONGINT);  (* w, h > 0 *)
		CONST SRCCOPY = 0CC0020H;
		VAR ret, bitmap, oldbitmap, hdc: LONGINT;
	BEGIN
		ret := User32.OpenClipboard(Win32.Display);
		IF ret # Kernel32.False THEN
			hdc := Win32.CreateCompatibleDC(Win32.hdcDisp);
			bitmap := Win32.CreateCompatibleBitmap(Win32.hdcDisp, w, h);
			oldbitmap := Win32.SelectObject(hdc, bitmap);
			Win32.BitBlt(hdc, 0, 0, w, h, Win32.hdcDisp, x, Display.Height-(y+h), SRCCOPY);
			User32.EmptyClipboard();
			ret := User32.SetClipboardData(User32.CFBitmap, bitmap);
			ret := User32.CloseClipboard();
			oldbitmap := Win32.SelectObject(hdc, oldbitmap); Win32.DeleteDC(hdc);
		END
	END PictureThis;

	PROCEDURE Snapshot*;
		(* takes a snapshot of the marked viewer, or the whole display if no viewer is marked *)
		VAR x, y, w, h: LONGINT; V: Viewers.Viewer;
	BEGIN
		IF Oberon.Pointer.on THEN
			V := Oberon.MarkedViewer();
			IF V # NIL THEN
				x := V.X; y := V.Y; w := V.W; h := V.H;
				IF x + w > Win32.DispW THEN
					DEC(w, x+w-Win32.DispW)
				END;
				IF y < Display.Height - Win32.DispH THEN
					INC(y, Display.Height - Win32.DispH);
					DEC(h, Display.Height - Win32.DispH)
				END;
				IF (w > 0) & (h > 0) THEN
					Oberon.RemoveMarks(SHORT(x), SHORT(y), SHORT(w), SHORT(h));
					PictureThis(x, y, w, h)
				END
			END
		ELSE
			w := Win32.DispW; h := Win32.DispH;
			y := Display.Height - Win32.DispH;
			PictureThis(0, y, w, h)
		END;
	END Snapshot;

	PROCEDURE AddAccels*;
	BEGIN
		Win32.AddAccel(Win32.Insert, {Win32.CTRL}, "Clipboard.Copy");
		Win32.AddAccel("C", {Win32.CTRL}, "Clipboard.Copy");
		Win32.AddAccel(Win32.Insert, {Win32.SHIFT}, "Clipboard.Paste");
		Win32.AddAccel("V", {Win32.CTRL}, "Clipboard.Paste");
		Win32.AddAccel(Win32.Delete, {Win32.SHIFT}, "Clipboard.Cut");
		Win32.AddAccel("X", {Win32.CTRL}, "Clipboard.Cut")
	END AddAccels;

BEGIN
	Texts.OpenWriter(W)
END Clipboard.

Clipboard.Cut
Clipboard.Copy
Clipboard.Paste
Clipboard.Snapshot
Clipboard.AddAccels

System.Free Clipboard ~
